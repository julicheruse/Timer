{"version":3,"sources":["Timer.js","serviceWorker.js","index.js"],"names":["Timer","useState","segundos","setSegundos","activo","setActivo","tipo","setTipo","myRef","useRef","agregaSegundos","ref","current","value","useEffect","intervalo","setInterval","clearInterval","className","onClick","type","onChange","placeholder","autoComplete","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gQAmFeA,G,MA/ED,WAAO,IAAD,EACcC,mBAAS,GADvB,mBACXC,EADW,KACDC,EADC,OAEUF,oBAAS,GAFnB,mBAEXG,EAFW,KAEHC,EAFG,OAGMJ,mBAAS,YAHf,mBAGXK,EAHW,KAGLC,EAHK,KAIZC,EAAQC,iBAAO,MAErB,SAASC,IAEP,IAAIC,EAAMH,EAAMI,QAAQC,MACxBV,EAAYQ,GA+Bd,OA5BAG,qBAAU,WACR,IAAIC,EAAY,KAwBhB,OAvBIX,GAAmB,aAATE,IACZS,EAAYC,aAAY,WACtBb,GAAY,SAAAD,GAAQ,OAAIA,EAAW,OAClC,MAEDE,GAAmB,qBAATE,IACZS,EAAYC,aAAY,WACtBb,GAAY,SAAAD,GAAQ,OAAIA,EAAW,OAClC,MAEAE,GAAuB,IAAbF,GAA2B,aAATI,GAC/BW,cAAcF,GAEC,IAAbb,GAA6B,qBAAXE,IACpBC,IACAY,cAAcF,IAEC,IAAbb,GAAkBE,GAAmB,qBAATE,GAG9BW,cAAcF,GAGT,kBAAME,cAAcF,MAC1B,CAACX,EAAQF,EAAUI,IAGpB,yBAAKY,UAAU,OACb,yBAAKA,UAAYhB,GAAqB,qBAATI,EAAuD,OAAzB,wBACxDJ,EADH,KAGA,yBAAKgB,UAAU,OACb,4BAAQA,UAAS,+CAA0Cd,EAAS,SAAW,YAAce,QAcnG,WACAd,GAAWD,KAdFA,EAAS,QAAU,UAEtB,4BAAQc,UAAU,SAASC,QAcjC,WACgB,qBAATb,GACHI,IACAL,GAAU,KAEVF,EAAY,GACZE,GAAU,MApBR,UAIF,4BAAQa,UAAU,SAASC,QAkB/B,WACc,aAATb,GAAqBC,EAAQ,oBACpB,qBAATD,GAA6BC,EAAQ,cAnBlCD,GAEM,qBAATA,GAA+B,2BAAOc,KAAK,SAAST,IAAKH,EAAOa,SAAUX,EAAgBY,YAAY,mBAAmBC,aAAa,WChDzHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,SD6H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fe5ae289.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './Timer.css';\r\n\r\n\r\nconst Timer = () => {\r\n  const [segundos, setSegundos] = useState(0); //segundos es el estado y set es el metodo para cambiarlo\r\n  const [activo, setActivo] = useState(false);\r\n  const [tipo, setTipo] = useState('Contador');\r\n  const myRef = useRef(null);\r\n  \r\n  function agregaSegundos() {\r\n    // `current` apunta al elemento de entrada de texto montado\r\n    let ref = myRef.current.value\r\n    setSegundos(ref)\r\n  }\r\n  \r\n  useEffect(() => {\r\n    let intervalo = null;\r\n    if (activo && tipo === 'Contador') {\r\n      intervalo = setInterval(() => {\r\n        setSegundos(segundos => segundos + 1);\r\n      }, 1000);\r\n    }\r\n    if (activo && tipo === 'Cuenta Regresiva') {\r\n      intervalo = setInterval(() => {\r\n        setSegundos(segundos => segundos - 1);\r\n      }, 1000);\r\n    }\r\n    if (!activo && segundos !== 0 && tipo === 'Contador') {\r\n      clearInterval(intervalo);\r\n    }\r\n    if (segundos === 0 && activo === 'Cuenta Regresiva') {\r\n      setActivo();\r\n      clearInterval(intervalo);\r\n    }\r\n    if (segundos === 0 && activo && tipo === 'Cuenta Regresiva') {\r\n      //reset();\r\n\r\n      clearInterval(intervalo);\r\n    }\r\n\r\n    return () => clearInterval(intervalo);\r\n  }, [activo, segundos, tipo]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className={!segundos && tipo === \"Cuenta Regresiva\" ? \"animated flash time0\" : \"time\" }>\r\n        {segundos}s\r\n      </div>\r\n      <div className=\"row\">\r\n        <button className={`button button-primary button-primary-${activo ? 'active' : 'inactive'}`} onClick={toggle}>\r\n          {activo ? 'Pausa' : 'Inicio'}\r\n        </button>\r\n        <button className=\"button\" onClick={reset}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n      <button className=\"button\" onClick={cambioTipo}>\r\n         {tipo}\r\n      </button>\r\n      {tipo === 'Cuenta Regresiva' && <input type=\"number\" ref={myRef} onChange={agregaSegundos} placeholder=\"Ingresa Segundos\" autoComplete=\"off\"/>}\r\n    </div>\r\n  );\r\n  \r\n  function toggle() {\r\n  setActivo(!activo);\r\n  }\r\n  function reset() {\r\n    if ( tipo === 'Cuenta Regresiva'){\r\n      agregaSegundos()\r\n      setActivo(false)\r\n    } else{\r\n      setSegundos(0); \r\n      setActivo(false);}\r\n  }\r\n  function cambioTipo() {\r\n    if(tipo === 'Contador') setTipo('Cuenta Regresiva')\r\n    if(tipo === 'Cuenta Regresiva') setTipo('Contador')\r\n  }\r\n  \r\n};\r\n\r\n\r\nexport default Timer;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Timer from './Timer';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Timer />, document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}